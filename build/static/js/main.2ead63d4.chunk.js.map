{"version":3,"sources":["Ship.js","Space.js","Gameboard.js","ComputerPlayer.js","Game.js","components/SpaceComponent.js","components/BoardComponent.js","components/PlaceShipComponent.js","components/PlacementComponent.js","App.js","index.js"],"names":["Ship","size","name","this","sections","i","push","position","isSunk","onSunk","reduce","prev","current","makePatrolBoat","makeSubmarine","makeDestroyer","makeBattleship","makeCarrier","Space","hitState","callback","onHitCallback","containsShip","WIDTH","HEIGHT","Gameboard","spaces","ships","shipSunkListeners","j","row","col","direction","shipSpaces","startRow","startCol","rowDelta","colDelta","validPlacement","currentSpace","getSpace","concat","hasShip","shipConstructor","ship","result","checkShipPlacement","addShip","forEach","sinkSpace","newBoard","Object","assign","shipSunk","updateCallback","index","Error","addHitListener","hit","onHit","shipName","console","log","cb","ComputerPlayer","opposingBoard","nextMoves","hits","shipsRemaining","determineMinShipSize","onShipSunk","bind","addShipSunkListener","keys","length","minShipSize","map","min","shipSize","filter","coords","destroy","Math","round","random","splice","search","recieveAttack","minRow","maxRow","minCol","maxCol","canFitVertically","verticalLength","canFitHorizontally","horizontalLength","canShipFitHere","validateSpaces","spacesToInvestigate","rowOffset","colOffset","row1","col1","row2","col2","abs","searchAlongColumn","searchAlongRow","allShips","constructor","placeShipsRandomly","board","shipsToPlace","placed","space","tryPlaceShip","Game","playerBoard","computerBoard","currentPlayer","human","gameState","PLACING_SHIPS","humanTurn","computerPlayer","makePlayerMove","nextMove","newState","stateChangedCallback","changeState","PLAYING","allShipsSunk","GAME_OVER","setTimeout","makeMove","SpaceComponent","props","className","onSpaceClicked","highlighted","invalidPlacement","onDrop","drop","onDragOver","e","preventDefault","onDragEnter","onDragLeave","onClick","opacity","COL_NUMBERS","ROW_LETTERS","BoardComponent","updateBoard","highlightRows","clearHighlighting","state","reveal","coordsToHighlight","prevProps","setState","startIndex","onClickCallback","slice","coordinate","rows","onMouseMove","style","fontWeight","title","num","generateRow","Component","PlaceShipComponent","draggable","onDragStart","dragStart","onDragEnd","dragEnd","display","justifyContent","flexDirection","alignItems","PlacementComponent","shipFlexDirection","containerFlexDirection","names","marginLeft","marginRight","textOrientation","writingMode","shipDisplays","currentShip","setCurrentShip","rotate","marginTop","marginBottom","placeRandomly","App","onGameStateChanged","shipPlaced","reset","playerBoardRef","React","createRef","game","floatingShipRef","newGame","newShips","shipKey","fontSize","ref","shipList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ead63d4.chunk.js","sourcesContent":["const SIZE_PATROL_BOAT = 2;\nconst SIZE_SUBMARINE = 3;\nconst SIZE_DESTROYER = 3;\nconst SIZE_BATTLESHIP = 4;\nconst SIZE_CARRIER = 5;\n\nconst DIRECTION_UP = 0;\nconst DIRECTION_RIGHT = 1;\nconst DIRECTION_DOWN = 2;\nconst DIRECTION_LEFT = 3;\n\nclass Ship {\n    constructor(size, name) {\n        this.sections = [];\n        this.size = size;\n        this.name = name;\n        for (let i = 0; i < size; i++) {\n            this.sections.push(false);\n        }\n    }\n\n    hit(position) {\n        this.sections[position] = true;\n        if (this.isSunk()) {\n            this.onSunk();\n        }\n    }\n\n    isSunk() {\n        return this.sections.reduce((prev, current) => {\n            return prev && current;\n        });\n    }\n}\n\nconst makePatrolBoat = function() {\n    return new Ship(SIZE_PATROL_BOAT, 'PT BOAT');\n}\n\nconst makeSubmarine = function() {\n    return new Ship(SIZE_SUBMARINE, 'SUBMARINE');\n}\n\nconst makeDestroyer = function() {\n    return new Ship(SIZE_DESTROYER, 'DESTROYER');\n}\n\nconst makeBattleship = function() {\n    return new Ship(SIZE_BATTLESHIP, 'BATTLESHIP');\n}\n\nconst makeCarrier = function() {\n    return new Ship(SIZE_CARRIER, 'CARRIER');\n}\n\nexport { DIRECTION_UP, DIRECTION_DOWN, DIRECTION_LEFT, DIRECTION_RIGHT, makePatrolBoat, makeDestroyer, makeSubmarine, makeBattleship, makeCarrier, SIZE_BATTLESHIP, SIZE_CARRIER, SIZE_SUBMARINE, SIZE_DESTROYER, SIZE_PATROL_BOAT }","const HIT_STATE_EMPTY = 0;\nconst HIT_STATE_HIT = 1;\nconst HIT_STATE_MISS = 2;\nconst HIT_STATE_REVEAL_SHIP = 3;\nconst HIT_STATE_SUNK = 4;\n\nclass Space {\n    constructor() {\n        this.hitState = HIT_STATE_EMPTY;\n    }\n\n    addHitListener(callback) {\n        this.onHitCallback = callback;\n    }\n\n    onHit() {\n        if (this.containsShip()) {\n            this.hitState = HIT_STATE_HIT;\n            this.onHitCallback();\n        }\n        else {\n            this.hitState = HIT_STATE_MISS;\n        }\n    }\n\n    onSunk() {\n        this.hitState = HIT_STATE_SUNK;\n    }\n\n    containsShip() {\n        // if we have a callback registered that this must be a ship space\n        return this.onHitCallback;\n    }\n}\n\nexport {HIT_STATE_EMPTY, HIT_STATE_HIT, HIT_STATE_MISS, HIT_STATE_REVEAL_SHIP, HIT_STATE_SUNK, Space};","import {DIRECTION_DOWN, DIRECTION_UP, DIRECTION_LEFT, DIRECTION_RIGHT} from './Ship';\nimport {Space} from './Space';\n\nconst WIDTH = 10;\nconst HEIGHT = WIDTH;\n\nclass Gameboard {\n    constructor() {\n        this.spaces = [];\n        this.ships = [];\n        this.shipSunkListeners = [];\n        for (let i = 0; i < WIDTH; i++) {\n            for (let j = 0; j < HEIGHT; j++) {\n                this.spaces.push(new Space());\n            }\n        }\n    }\n\n    checkShipPlacement(row, col, size, direction) {\n        let shipSpaces = [];\n        let startRow = row;\n        if (row < 0) {\n            startRow = 0;\n        } else if (row >= HEIGHT) {\n            startRow = HEIGHT - 1;\n        }\n        let startCol = col;\n        if (col < 0) {\n            startCol = 0;\n        } else if (row >= WIDTH) {\n            startCol = WIDTH - 1;\n        }\n        let rowDelta = 0;\n        let colDelta = 0;\n        // if we're near an edge, adjust so we're in bounds\n        switch(direction) {\n            case DIRECTION_DOWN:\n                rowDelta = 1;\n                if (startRow + rowDelta * (size - 1) >= HEIGHT) {\n                    startRow = HEIGHT - (size);\n                }\n                // go from startRow down to startRow + (size - 1)\n                break;\n            case DIRECTION_LEFT:\n                colDelta = -1;\n                if (startCol + colDelta * (size - 1) < 0) {\n                    startCol = WIDTH + (size - 1);\n                }\n                // go from startCol up to startCol - (size - 1)\n                break;\n            case DIRECTION_RIGHT:\n                colDelta = 1;\n                if (startCol + colDelta * (size - 1) >= WIDTH) {\n                    startCol = WIDTH - (size);\n                }\n                // go from startCol up to startCol + (size - 1)\n                break;\n            default:\n                rowDelta = -1;\n                if (startRow + rowDelta * (size - 1) < 0) {\n                    startRow = (size - 1);\n                }\n                // go from startRow up to startRow - (size - 1)\n        }\n        let validPlacement = true;\n\n        for (let i = 0; i < size; i++) {\n            const row = startRow + (i * rowDelta);\n            const col = startCol + (i * colDelta);\n            const currentSpace = this.getSpace(row, col);\n            if (currentSpace && currentSpace.onHitCallback) {\n                validPlacement = false;\n                shipSpaces = shipSpaces.concat({row, col, hasShip: true});\n            }\n            if (currentSpace) {\n                shipSpaces = shipSpaces.concat({row, col, hasShip: false});\n            }\n            else { // out of bounds\n                return {shipSpaces: [], validPlacement: false};\n            }   \n            \n        }\n\n        return {shipSpaces, validPlacement};\n    }\n\n    tryPlaceShip(row, col, shipConstructor, direction) {\n        const ship = shipConstructor(() => false);\n        // return true if ship successfully placed, false otherwise\n        const size = ship.size;\n        const result = this.checkShipPlacement(row, col, size, direction);\n        if (result.validPlacement) {\n            this.addShip(ship, result.shipSpaces);\n        }\n        \n        return result.validPlacement;\n    }\n\n    addShip(ship, shipSpaces) {\n        ship.onSunk = () => {\n            shipSpaces.forEach(({row, col}) => {\n                this.sinkSpace(row, col);\n            });\n            const newBoard = Object.assign(this);\n            this.shipSunk(ship.name);\n            this.updateCallback(newBoard);\n        }\n        shipSpaces.forEach(({row, col}, index) => {\n            const currentSpace = this.getSpace(row, col);\n            if (currentSpace.onHitCallback) {\n                throw new Error(`Tried to place ships on top of each other! Row: ${row}, Col: ${col}`);\n            }\n            currentSpace.addHitListener(() => {\n                ship.hit(index);\n            });\n        });\n        this.ships.push(ship);\n\n        const newBoard = Object.assign(this);\n        newBoard.ships.push(ship);\n        if (this.updateCallback) {\n            this.updateCallback(newBoard);\n        }\n        return newBoard;\n    }\n\n    getSpace(row, col) {\n        return this.spaces[row * WIDTH + col];\n    }\n\n    recieveAttack(row, col) {\n        const space = this.getSpace(row, col);\n        space.onHit();\n        const newBoard = Object.assign(this);\n        this.updateCallback(newBoard);\n        return newBoard;\n    }\n\n    sinkSpace(row, col) {\n        const space = this.getSpace(row, col);\n        space.onSunk();\n    }\n\n    allShipsSunk() {\n        return this.ships.reduce((prev, ship) => prev && ship.isSunk(), true);\n    }\n\n    shipSunk(shipName) {\n        console.log(`Sunk ${shipName}`);\n        this.shipSunkListeners.forEach(cb => cb(shipName));\n    }\n\n    addShipSunkListener(cb) {\n        this.shipSunkListeners.push(cb);\n    }\n}\n\nexport {WIDTH, HEIGHT, Gameboard};","import {WIDTH, HEIGHT} from './Gameboard';\nimport {HIT_STATE_EMPTY, HIT_STATE_HIT, HIT_STATE_SUNK} from './Space';\n\n\nclass ComputerPlayer {\n    constructor(opposingBoard) {\n        this.opposingBoard = opposingBoard;\n        this.nextMoves = [];\n        this.hits = [];\n        this.shipsRemaining = {\n            'PT BOAT': 2,\n            'SUBMARINE': 3,\n            'DESTROYER': 3,\n            'BATTLESHIP': 4,\n            'CARRIER': 5\n        }\n        this.determineMinShipSize();\n        this.onShipSunk = this.onShipSunk.bind(this);\n        opposingBoard.addShipSunkListener(this.onShipSunk);\n    }\n\n    /**\n     * Determine the size of the smallest enemy ship still sailing \n     */\n    determineMinShipSize() {\n        if (Object.keys(this.shipsRemaining).length) {\n            this.minShipSize = Object.keys(this.shipsRemaining).map(shipName => this.shipsRemaining[shipName]).reduce((min, current) => current < min ? current : min);\n        }\n    }\n\n    onShipSunk(shipName) {\n        const shipSize = this.shipsRemaining[shipName];\n        delete this.shipsRemaining[shipName];\n        if (shipSize === this.minShipSize) {\n            this.determineMinShipSize();\n        }\n        this.hits = this.hits.filter(({row, col}) => {\n            return this.opposingBoard.getSpace(row, col).hitState !== HIT_STATE_SUNK;\n        });\n        this.nextMoves = [];\n    }\n\n    makeMove() {\n        let coords;\n        if (this.hits.length) {\n            this.destroy();\n            do {\n                const index = Math.round(Math.random() * (this.nextMoves.length - 1));\n                coords = this.nextMoves.splice(index, 1)[0];\n            } while (this.opposingBoard.getSpace(coords.row, coords.col).hitState !== HIT_STATE_EMPTY)\n        } else {\n            coords = this.search();\n        }\n        \n        this.opposingBoard.recieveAttack(coords.row, coords.col);\n        if (this.opposingBoard.getSpace(coords.row, coords.col).hitState === HIT_STATE_HIT) {\n            this.hits.push(coords);\n            return true;\n        } else if (this.opposingBoard.getSpace(coords.row, coords.col).hitState === HIT_STATE_SUNK) {\n            return true;\n        }\n        return false;\n    }\n\n    verticalLength(row, col) {\n        let minRow = row;\n        let currentSpace = this.opposingBoard.getSpace(minRow, col);\n        while (minRow - 1 >= 0 && (currentSpace.hitState === HIT_STATE_EMPTY || currentSpace.hitState === HIT_STATE_HIT)) {\n            minRow -= 1;\n            currentSpace = this.opposingBoard.getSpace(minRow, col);\n        }\n\n        let maxRow = row;\n        currentSpace = this.opposingBoard.getSpace(maxRow, col);\n        while (maxRow + 1 < HEIGHT && (currentSpace.hitState === HIT_STATE_EMPTY || currentSpace.hitState === HIT_STATE_HIT)) {\n            maxRow += 1;\n            currentSpace = this.opposingBoard.getSpace(maxRow, col);\n        }\n        return (maxRow - minRow) + 1;\n    }\n\n    horizontalLength(row, col) {\n        let minCol = col;\n        let currentSpace = this.opposingBoard.getSpace(row, minCol);\n        while (minCol - 1 >= 0 && (currentSpace.hitState === HIT_STATE_EMPTY || currentSpace.hitState === HIT_STATE_HIT)) {\n            minCol -= 1;\n            currentSpace = this.opposingBoard.getSpace(row, minCol);\n        }\n\n        let maxCol = col;\n        currentSpace = this.opposingBoard.getSpace(row, maxCol);\n        while (maxCol + 1 < WIDTH && (currentSpace.hitState === HIT_STATE_EMPTY || currentSpace.hitState === HIT_STATE_HIT)) {\n            maxCol += 1;\n            currentSpace = this.opposingBoard.getSpace(row, maxCol);\n        }\n        return (maxCol - minCol) + 1;\n    }\n\n    /**\n     * Given a set of coordinates, can the minimum sized ship fit here? (i.e. is this space worth investigating?)\n     * @param {Number} row \n     * @param {Number} col \n     */\n    canShipFitHere(row, col) {\n        if (row < 0 || row >= HEIGHT || col < 0 || col >= WIDTH) {\n            return false;\n        }\n        const canFitVertically = this.verticalLength(row, col) >= this.minShipSize;\n        const canFitHorizontally =  this.horizontalLength(row, col) >= this.minShipSize;\n        return (canFitVertically|| canFitHorizontally);\n    }\n\n    /**\n     * Search for a ship to destroy, filtering out spaces we know cannot contain a ship based on our\n     * knowledge of the ships we've already sunk \n     * @returns \n     */\n    search() {\n        let row;\n        let col;\n        do { // keep trying until we find a space that hasn't been hit and could possibly contain a min length ship\n            row = Math.round(Math.random() * (HEIGHT - 1));\n            col = Math.round(Math.random() * (WIDTH - 1));\n        } while (this.opposingBoard.getSpace(row, col).hitState !== HIT_STATE_EMPTY && !this.canShipFitHere(row, col));\n        return {row, col};\n    }\n\n    validateSpaces(coords) {\n        return coords.filter(({row, col}) => {\n            return row >= 0 && row < HEIGHT && col >= 0 && col < WIDTH\n            && this.opposingBoard.getSpace(row, col).hitState === HIT_STATE_EMPTY;\n        });\n    }\n\n    searchAlongColumn(coords) {\n        let maxRow = coords.row;\n        let minRow = coords.row;\n        const col = coords.col;\n        while (maxRow < HEIGHT && this.opposingBoard.getSpace(maxRow, col).hitState === HIT_STATE_HIT) {\n            maxRow ++;\n        }\n        while (minRow >= 0 && this.opposingBoard.getSpace(minRow, col).hitState === HIT_STATE_HIT) {\n            minRow --;\n        }\n        const spacesToSearch = this.validateSpaces([{row: maxRow , col}, {row: minRow, col}]);\n        return spacesToSearch;\n    }\n\n    searchAlongRow(coords) {\n        let maxCol = coords.col;\n        let minCol = coords.col;\n        const row = coords.row;\n        while (maxCol < WIDTH && this.opposingBoard.getSpace(row, maxCol).hitState === HIT_STATE_HIT) {\n            maxCol ++;\n        }\n        while (minCol >= 0 && this.opposingBoard.getSpace(row, minCol).hitState === HIT_STATE_HIT) {\n            minCol --;\n        }\n        const spacesToSearch = this.validateSpaces([{row, col: maxCol}, {row, col: minCol}]);\n        return spacesToSearch;\n    }\n\n    /**\n     * Hone in and sink the ship we've hit\n     */\n    destroy() {\n        if (this.hits.length === 1) {\n            const coords = this.hits[0];\n            const adjacentSpaces = [[1,0], [0,-1], [0,1], [-1,0]].map(([rowOffset, colOffset]) => {\n                return {row: coords.row + rowOffset, col: coords.col + colOffset};\n            });\n            const spacesToInvestigate = adjacentSpaces.filter(({row, col}) => {\n                return this.canShipFitHere(row, col);\n                // seems to be an issue with this function, need to investigate\n            });\n            this.nextMoves = this.nextMoves.concat(spacesToInvestigate);\n        } else {\n            // determine which way we should be searching\n            this.nextMoves = [];\n            const row1 = this.hits[0].row;\n            const col1 = this.hits[0].col;\n            const row2 = this.hits[1].row;\n            const col2 = this.hits[1].col;\n            const rowDelta = Math.abs(row1 - row2);\n            const colDelta = Math.abs(col1 - col2);\n            if (rowDelta > 0) {\n                // search up and down along this column\n                this.nextMoves = this.nextMoves.concat(this.searchAlongColumn(this.hits[0]));\n                if (this.nextMoves.length === 0) {\n                    // we've searched along this column already and haven't sunk a ship yet\n                    // try the rows instead\n                    do {\n                        const index = Math.round(Math.random() * (this.hits.length - 1));\n                        this.nextMoves = this.nextMoves.concat(this.searchAlongRow(this.hits[index]));\n                    } while (this.nextMoves.length === 0);\n                }\n            } else if (colDelta > 0) {\n                // search left and right along this row \n                this.nextMoves = this.nextMoves.concat(this.searchAlongRow(this.hits[0]));\n                if (this.nextMoves.length === 0) {\n                    // we've searched along this row already and haven't sunk a ship yet\n                    // try the columns instead\n                    do {\n                        const index = Math.round(Math.random() * (this.hits.length - 1));\n                        this.nextMoves = this.nextMoves.concat(this.searchAlongColumn(this.hits[index]));\n                    } while (this.nextMoves.length === 0);\n                }\n            }\n        }\n        if (this.nextMoves.length === 0) {\n            console.log('destroy failed to produce new coordinates');\n        }        \n    }\n}\n\nexport default ComputerPlayer;","import { Gameboard } from \"./Gameboard\";\nimport { PLAYING, PLACING_SHIPS, GAME_OVER } from './App';\nimport {WIDTH, HEIGHT} from './Gameboard';\nimport { makeBattleship, makePatrolBoat, makeSubmarine, makeDestroyer, makeCarrier } from \"./Ship\";\nimport {HIT_STATE_EMPTY, HIT_STATE_MISS} from './Space';\nimport ComputerPlayer from \"./ComputerPlayer\";\n\nconst allShips = [\n    {constructor: makePatrolBoat, size: 2},\n    {constructor: makeSubmarine, size: 3},\n    {constructor: makeDestroyer, size: 3},\n    {constructor: makeBattleship, size: 4},\n    {constructor: makeCarrier, size: 5}\n];\n\nfunction placeShipsRandomly(board, shipsToPlace) {\n    const ships = Object.assign(shipsToPlace);\n    ships.forEach(({constructor: shipConstructor, size}) => {\n        let placed = false;\n        while (!placed) {\n            const row = Math.round(Math.random() * (HEIGHT - 1));\n            const col = Math.round(Math.random() * (WIDTH - 1));\n            const direction = Math.round(Math.random());\n            const result = board.checkShipPlacement(row, col, size, direction);\n            if (result.validPlacement) {\n                const spaces = result.shipSpaces;\n                const withAdjacent = spaces.map(({row, col}) => {\n                    const adjacentSpaces = [[1, 0], [-1, 0], [0, 1], [0, -1]].map(([rowOffset, colOffset]) => {\n                        return {row: row + rowOffset, col: col + colOffset};\n                    });\n                    return adjacentSpaces;\n                }).reduce((prev, current) => prev.concat(current))\n                .filter(({row, col}) => {\n                    const space = board.getSpace(row, col);\n                    return space ? space.onHitCallback : false;\n                });\n                if (!withAdjacent.length) {\n                    placed = board.tryPlaceShip(row, col, shipConstructor, direction);\n                }\n            }\n        }\n    });\n\n    return board;\n}\n\nclass Game {\n    constructor() {\n        const playerBoard = new Gameboard();\n        const computerBoard = placeShipsRandomly(new Gameboard(), allShips);\n        this.playerBoard = playerBoard;\n        this.computerBoard = computerBoard;\n        this.currentPlayer = this.human;\n        this.gameState = PLACING_SHIPS;\n        this.humanTurn = true;\n        this.computerPlayer = new ComputerPlayer(playerBoard);\n        this.makePlayerMove = this.makePlayerMove.bind(this);\n        \n        this.nextMove = this.nextMove.bind(this);\n    }\n\n    changeState(newState) {\n        this.gameState = newState;\n        this.stateChangedCallback(this);\n    }\n\n    startGame() {\n        this.computerBoard = placeShipsRandomly(this.computerBoard, allShips);\n        this.changeState(PLAYING);\n    }\n\n    reset() {\n        this.playerBoard = new Gameboard();\n        this.computerBoard = placeShipsRandomly(new Gameboard(), allShips);\n        this.humanTurn = true;\n        this.changeState(PLACING_SHIPS);\n    }\n\n    makePlayerMove(row, col) {\n        if (this.humanTurn) {\n            if (this.computerBoard.getSpace(row,col).hitState === HIT_STATE_EMPTY) {\n                const result = this.computerBoard.recieveAttack(row, col);\n                if (this.computerBoard.getSpace(row, col).hitState === HIT_STATE_MISS) {\n                    this.humanTurn = false;\n                }\n                this.computerBoard = result;\n            }\n            this.nextMove();\n        }\n    }\n\n    nextMove() {\n        if (this.computerBoard.allShipsSunk()) {\n            console.log(\"Player wins!\");\n            this.changeState(GAME_OVER);\n            return;\n        } \n        if (this.playerBoard.allShipsSunk()) {\n            console.log(\"Computer wins!\");\n            this.changeState(GAME_OVER);\n            return;\n        }\n        else {\n            if (this.humanTurn) {\n                // wait for player input\n            }\n            else {\n                setTimeout(() => {\n                    const result = this.computerPlayer.makeMove();\n                    if (!result) {\n                        this.humanTurn = true;\n                    }\n                    this.nextMove();\n                }, 450);\n            }\n        }    \n    }\n\n    getComputerBoard() {\n        return this.computerBoard;\n    }\n\n    getPlayerBoard() {\n        return this.playerBoard;\n    }\n}\n\nexport {Game, placeShipsRandomly};","import React from 'react';\nimport {HIT_STATE_EMPTY, HIT_STATE_MISS, HIT_STATE_HIT, HIT_STATE_REVEAL_SHIP, HIT_STATE_SUNK } from \"../Space\";\n\nfunction SpaceComponent(props) {\n    const {hitState, onSpaceClicked} = props;\n    let className;\n    // only allow a click event if this square hasn't been clicked yet\n    switch (hitState) {\n        case HIT_STATE_SUNK:\n            className = 'sunk-square';\n            break;\n        case HIT_STATE_REVEAL_SHIP:\n            className = 'ship-square';\n            break;\n        case HIT_STATE_HIT:\n            className = 'hit-square';\n            break;\n        case HIT_STATE_MISS:\n            className = 'miss-square';\n            break;\n        default:\n            className = 'empty-square';\n        if (props.highlighted) {\n            if (props.invalidPlacement) {\n                className += ' highlighted-invalid';\n            } else {\n                className += ' highlighted';\n            }   \n        }\n    }\n    return (onSpaceClicked !== null ? <div onDrop={props.drop} onDragOver={(e) => e.preventDefault()} onDragEnter={(e) => {\n        e.preventDefault();\n        props.onDragEnter();\n    }} onDragLeave={props.onDragLeave} className={className + ' space clickable'} onClick={onSpaceClicked} opacity={props.opacity}/> \n        : <div onDrop={props.drop} onDragOver={(e) => e.preventDefault()} \n        onDragEnter={(e) => {\n            e.preventDefault();\n            props.onDragEnter();\n        }} onDragLeave={props.onDragLeave} className={className + ' space'} opacity={props.opacity}/>);\n    \n}\n\nexport default SpaceComponent;","import React, { Component } from 'react';\nimport SpaceComponent from './SpaceComponent';\nimport {HEIGHT, WIDTH } from '../Gameboard';\nimport { HIT_STATE_REVEAL_SHIP, HIT_STATE_HIT, HIT_STATE_SUNK, HIT_STATE_EMPTY } from '../Space';\nimport { DIRECTION_DOWN } from '../Ship';\n\nconst COL_NUMBERS = ['', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ''];\nconst ROW_LETTERS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];\n\nclass BoardComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.updateBoard = this.updateBoard.bind(this);\n        this.highlightRows = this.highlightRows.bind(this);\n        this.clearHighlighting = this.clearHighlighting.bind(this);\n        this.props.board.updateCallback = this.updateBoard;\n\n        this.state = {\n            board: this.props.board,\n            reveal: this.props.reveal,\n            coordsToHighlight: []\n        }\n    }\n    \n    componentDidUpdate(prevProps) {\n        if (prevProps.board !== this.props.board) {\n            this.props.board.updateCallback = this.updateBoard;\n            this.updateBoard(this.props.board);\n            this.setState({\n                coordsToHighlight: []\n            });\n        }\n    }\n\n    highlightRows(startRow, startCol) {\n        this.clearHighlighting();\n        let row, col;\n        if (this.props.direction === DIRECTION_DOWN) {\n            row = startRow - this.props.startIndex;\n            col = startCol;\n        } else {\n            row = startRow;\n            col = startCol - this.props.startIndex;\n        }\n        const result = this.state.board.checkShipPlacement(row, col, this.props.shipSize, this.props.direction);\n        this.setState({\n            validPlacement: result.validPlacement,\n            coordsToHighlight: result.shipSpaces\n        });\n    }\n\n    clearHighlighting() {\n        this.setState({\n            validPlacement: false,\n            coordsToHighlight: []\n        });\n    }\n\n    generateRow(row) {\n        const {onClickCallback, ship} = this.props;\n        const {validPlacement, coordsToHighlight, board} = this.state;\n        const spaces = board.spaces;\n        return (<div className='row' key={row}>\n            <p className='grid-label'>{ROW_LETTERS[row]}</p>\n            {spaces.slice(row * HEIGHT, row * HEIGHT + WIDTH).map((space, col) => {\n                const showShip = this.props.reveal && board.getSpace(row, col).onHitCallback && space.hitState !== HIT_STATE_HIT && space.hitState !== HIT_STATE_SUNK;\n                const hitState = showShip ? HIT_STATE_REVEAL_SHIP : space.hitState;\n                const onDragEnter = ship ? () => this.highlightRows(row, col) : null;\n                let rowOffset = 0;\n                let colOffset = 0;\n                if (this.props.direction === DIRECTION_DOWN) {\n                    rowOffset = -this.props.startIndex;\n                } else {\n                    colOffset = -this.props.startIndex;\n                }\n                const drop = ship ? () => { this.props.drop(row + rowOffset, col + colOffset);\n                                            this.clearHighlighting(); } \n                                            : null;\n                const highlighted = coordsToHighlight.filter(coordinate => {\n                    return coordinate.row === row && coordinate.col === col;\n                });\n                return <SpaceComponent highlighted={highlighted.length} invalidPlacement={highlighted.length && !validPlacement} hitState={hitState} row={row} col={col} key={row * HEIGHT + col} onDragEnter={onDragEnter} drop={drop ? drop : null} onSpaceClicked={onClickCallback && hitState === HIT_STATE_EMPTY ? () => onClickCallback(row, col) : null}/>\n            })}\n            <p className='grid-label'></p>\n        </div>);\n    }\n\n    updateBoard(newBoard) {\n        this.setState({\n            board: newBoard,\n        });\n    }\n    \n    \n    componentWillUnmount() {\n        const newBoard = Object.assign(this.state.board);\n        newBoard.updateCallback = null;\n        this.setState = {\n            board: newBoard,\n            coordsToHighlight: []\n        }\n    }\n\n    render() {\n        const rows = [];\n        for (let i = 0; i < HEIGHT; i++) {\n            rows.push(i);\n        }\n        return (<div className='board-grid' onMouseMove={this.props.onMouseMove}>\n            <p style={{fontWeight: 'bold'}}>{this.props.title}</p>\n            <div className='row'>{COL_NUMBERS.map(num => <p className='grid-label'>{num}</p>)}</div>\n            {rows.map(row => {\n                return this.generateRow(row);\n            })}\n        </div>);\n    }\n}\n\nexport default BoardComponent;","import React, {Component} from 'react';\n\nclass PlaceShipComponent extends Component {\n    render() {\n        const spaces = [];\n        for (let i = 0; i < this.props.shipSize; i++) {\n            spaces.push(<div className='space ship-square' key={i} draggable={true} onDragStart={(e) => {\n                this.props.dragStart(i);}}\n                onDragEnd={(e) => this.props.dragEnd()}></div>);\n        }\n        return (\n        <div style={{display:'flex', justifyContent: 'center', flexDirection: this.props.flexDirection, alignItems: 'center'}} className='ship-placement'>\n            <div style={{flexDirection: this.props.flexDirection, display: 'flex', alignItems: 'flex-end'}}>\n                {spaces}\n            </div>\n        </div>);\n    }\n\n}\n\nexport default PlaceShipComponent;","import { DIRECTION_DOWN } from '../Ship';\nimport React from 'react';\nimport PlaceShipComponent from './PlaceShipComponent';\n\nfunction PlacementComponent(props) {\n    const shipFlexDirection = props.direction === DIRECTION_DOWN ? 'row' : 'column';\n    const containerFlexDirection = props.direction === DIRECTION_DOWN ? 'column' : 'row';\n    const alignItems = containerFlexDirection === 'row' ? 'flex-end' : 'flex-start';\n\n    const names = Object.keys(props.ships).map(ship => {\n        const currentShip = props.ships[ship];\n        if (!currentShip.placed) {\n            return <p style={{marginLeft: '4px', marginRight: '4px', textOrientation: 'mixed', writingMode: props.direction === DIRECTION_DOWN ? 'vertical-rl' : 'horizontal-tb'}}>{ship}</p>\n        } else {\n            return null;\n        }\n    });\n    const shipDisplays = Object.keys(props.ships).map((ship, index) => {\n        // need to generate two columns (or rows)\n        // one with ship name, aligned to flex-start\n        // other with squares, aligned to flex-end\n        const currentShip = props.ships[ship];\n        if (!currentShip.placed) {\n            return <PlaceShipComponent key={index} shipName={ship} dragStart={(i) => props.setCurrentShip(ship, i, currentShip.size)} dragEnd={props.dragEnd} shipSize={currentShip.size} flexDirection={containerFlexDirection}/>\n        } else {\n            return null;\n        }\n    });\n    return (\n        <div>\n            <div className='row' style={{justifyContent: 'center'}}>\n                <button onClick={props.rotate}>Rotate Ships</button>\n            </div>\n            <div className='ship-placement-container' style={{flexDirection: containerFlexDirection, alignItems: 'stretch', marginTop: '16px', marginBottom: '16px'}}>\n                <div style={{display: 'flex', flexDirection: shipFlexDirection, alignItems: 'flex-start', justifyContent: 'space-around'}}>{names}</div>\n                <div style={{display: 'flex', flexDirection: shipFlexDirection, alignItems: alignItems, justifyContent: 'space-around'}}>{shipDisplays}</div>\n            </div>\n            <div className='row' style={{justifyContent: 'center'}}>\n                <button onClick={props.placeRandomly}>Place Ships Randomly</button>\n            </div>\n          </div>\n    )\n}\n\n\nexport default PlacementComponent;","import React, { Component } from 'react';\nimport { Game, placeShipsRandomly } from './Game';\nimport BoardComponent from './components/BoardComponent';\nimport PlaceShipComponent from './components/PlaceShipComponent';\nimport { DIRECTION_DOWN, DIRECTION_RIGHT, makePatrolBoat, makeSubmarine, makeDestroyer, makeBattleship, makeCarrier, SIZE_PATROL_BOAT, SIZE_SUBMARINE, SIZE_DESTROYER, SIZE_BATTLESHIP, SIZE_CARRIER, DIRECTION_UP } from './Ship';\nimport PlacementComponent from './components/PlacementComponent';\n\nconst PLACING_SHIPS = 0;\nconst PLAYING = 1;\nconst GAME_OVER = 2;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onGameStateChanged = this.onGameStateChanged.bind(this);\n    this.rotate = this.rotate.bind(this);\n    this.shipPlaced = this.shipPlaced.bind(this);\n    this.reset = this.reset.bind(this);\n    this.setCurrentShip = this.setCurrentShip.bind(this);\n    this.playerBoardRef = new React.createRef();\n\n    const game = new Game();\n    game.stateChangedCallback = this.onGameStateChanged;\n    this.state = {\n      game: game,\n      gameState: game.gameState,\n      currentShip: null,\n      startIndex: null,\n      shipSize: null,\n      direction: DIRECTION_DOWN,\n      ships: {\n        'PT Boat': { constructor: makePatrolBoat, placed: false, size: SIZE_PATROL_BOAT},\n        'Destroyer': { constructor: makeDestroyer, placed: false, size: SIZE_DESTROYER},\n        'Submarine': { constructor: makeSubmarine, placed: false, size: SIZE_SUBMARINE},\n        'Battleship': { constructor: makeBattleship, placed: false, size: SIZE_BATTLESHIP},\n        'Carrier': { constructor: makeCarrier, placed: false, size: SIZE_CARRIER},\n      },\n    }\n\n    this.floatingShipRef = React.createRef();\n  }\n\n  onGameStateChanged(newGame) {\n    const newState = newGame.gameState;\n    if (newState === PLACING_SHIPS) {\n      this.setState({\n        game: newGame,\n        gameState: newState,\n        currentShip: null,\n        ships: {\n          'PT Boat': { constructor: makePatrolBoat, placed: false, size: SIZE_PATROL_BOAT},\n          'Destroyer': { constructor: makeDestroyer, placed: false, size: SIZE_DESTROYER},\n          'Submarine': { constructor: makeSubmarine, placed: false, size: SIZE_SUBMARINE},\n          'Battleship': { constructor: makeBattleship, placed: false, size: SIZE_BATTLESHIP},\n          'Carrier': { constructor: makeCarrier, placed: false, size: SIZE_CARRIER},\n        },\n      })\n    }\n    else {\n      this.setState({\n        gameState: newState\n      });\n    }\n  }\n\n  setCurrentShip(ship, i, shipSize) {\n    if (ship === '') {\n      this.setState({\n        currentShip: null,\n        startIndex: null,\n        shipSize: null\n      })\n    }\n    else if (!this.state.ships[ship].placed) {\n      this.setState({\n        currentShip: ship,\n        startIndex: i,\n        shipSize: shipSize\n      });\n    }\n  }\n\n  rotate() {\n    if (this.state.direction === DIRECTION_DOWN) {\n        this.setState({\n          direction: DIRECTION_RIGHT\n      });\n    }\n    else {\n        this.setState({\n          direction: DIRECTION_DOWN\n        });\n    }\n  }\n\n  shipPlaced(ship) {\n    const newShips = Object.assign(this.state.ships);\n    newShips[ship] = { placed: true };\n    const allShipsPlaced = Object.keys(this.state.ships).reduce((prev, shipKey) => {\n      return prev && newShips[shipKey].placed;\n    }, true); \n    if (allShipsPlaced) {\n      this.setState({\n        ships: newShips,\n        currentShip: null,\n        gameState: PLAYING,\n      });\n    }\n    else {\n      this.setState({\n        ships: newShips,\n        currentShip: null\n      });\n    }\n  }\n\n  reset() {\n    const game = new Game();\n    game.stateChangedCallback = this.onGameStateChanged;\n    this.onGameStateChanged(game);\n  }\n\n  render() {\n    const {gameState, ships, currentShip, game, direction, startIndex, shipSize} = this.state;\n    switch(gameState) {\n      case PLACING_SHIPS:\n        return (<div className='vertical-display'>\n          <p style={{fontWeight: 'bold', fontSize: '40px', marginTop: '12px'}}>Battleship</p>\n          <BoardComponent ref={this.playerBoardRef} board={game.playerBoard} reveal={true} ship={currentShip} shipSize={shipSize} startIndex={startIndex} direction={direction}\n            drop={(row, col) => {\n              if (currentShip) {\n                const result = game.playerBoard.tryPlaceShip(row, col, ships[currentShip].constructor, direction);\n                if (result) {\n                  this.shipPlaced(currentShip);\n                }\n          }}}/> \n          <p>Place all ships to start the game</p>\n          <p style={{marginTop: '4px', marginBottom: '4px'}}>To place ships, click and drag them onto the board</p>\n          <PlacementComponent ships={ships} direction={direction} rotate={this.rotate} dragEnd={this.playerBoardRef.current ? this.playerBoardRef.current.clearHighlighting : () => null}\n        placeRandomly={\n          () => {\n            const shipList = Object.keys(ships).filter(shipName => !ships[shipName].placed).map(shipName => {\n              return {constructor: ships[shipName].constructor, size: ships[shipName].size}\n            });\n            placeShipsRandomly(game.playerBoard, shipList);\n              this.setState({\n                ships: {},\n                currentShip: null,\n                gameState: PLAYING,\n              });\n          }} \n          setCurrentShip={this.setCurrentShip}/>\n        </div>);\n      case PLAYING:\n        return (<div className='main-display'>\n          <BoardComponent title='Your Board' board={game.playerBoard} reveal={true}/>\n          <BoardComponent title='Opponent Board' onClickCallback={game.makePlayerMove} board={game.computerBoard} reveal={false}/>\n        </div>)\n      case GAME_OVER:\n        return (<div>\n          <div className='main-display'>\n            <BoardComponent title='Your Board' board={game.playerBoard} reveal={true}/>\n            <BoardComponent title='Opponent Board' board={game.computerBoard} reveal={true}/>\n          </div>\n          <div className='row' style={{justifyContent: 'center'}}>\n            <button onClick={this.reset}>Play Again?</button>\n          </div>\n        </div>);\n      default:\n        console.log(`no match for game state: ${gameState}`);\n        return null; \n    }\n  }\n}\n\nexport {App, PLAYING, PLACING_SHIPS, GAME_OVER};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}